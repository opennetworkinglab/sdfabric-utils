#!/usr/bin/env python3
# SPDX-FileCopyrightText: Copyright 2021-present Open Networking Foundation.
# SPDX-License-Identifier: LicenseRef-ONF-Member-Only-1.0

import argparse
import json
import os

from deepinsight import gen_topo

parser = argparse.ArgumentParser(
    os.path.basename(__file__), formatter_class=argparse.ArgumentDefaultsHelpFormatter
)
subparsers = parser.add_subparsers(dest="command", help="Subcommands", required=True)

sp = subparsers.add_parser("gen-topology", help="Generate topology json file")
sp.add_argument(
    "-s",
    "--onos-address",
    help="ONOS REST API URL",
    type=str,
    default="localhost:8181",
)
sp.add_argument("-u", "--onos-user", help="ONOS user", type=str, default="onos")
sp.add_argument(
    "-p",
    "--onos-password",
    help="ONOS password",
    type=str,
    default="rocks",
)
sp.add_argument(
    "--k8s-subnet",
    help="Default K8s cluster subnet used for inter-node communication (in the CIDR format).",
    type=str,
    default="",
)
sp.add_argument(
    "--node-iface-no",
    help="Default K8s node interface number retrieved via `ip link`. "
    "The script assumes the same number on each K8s node.",
    type=int,
    default=0,
)
sp.add_argument("--k8s-config", help="Kubernetes config", type=str, default=None)
sp.add_argument(
    "-o",
    "--output",
    help="The topology file, default is stdout.",
    type=str,
    default=None,
)

args = parser.parse_args()

def main():
    if args.command == "gen-topology":
        with_end_host = args.k8s_subnet != ""
        onos_url = f"http://{args.onos_address}/onos/v1"
        topo_json = gen_topo(
            onos_url,
            args.onos_user,
            args.onos_password,
            with_end_host,
            args.k8s_subnet,
            args.node_iface_no,
            args.k8s_config,
        )
        if args.output:
            with open(args.output, "w") as f:
                json.dump(topo_json, f, indent=2)
        else:
            print(json.dumps(topo_json, indent=2))
        return

if __name__ == "__main__":
    main()
